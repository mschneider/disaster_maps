// Page layout can be done using mixins applied to your semantic classes and IDs
// For instance this layout defines a two column layout on pages with
// a body class of "two-col".
//
// The markup would look like:
//    <div id="container">
//      <div id="header"></div>
//      <div id="sidebar"></div>
//      <div id="content"></div>
//      <div id="footer"></div>
//    </div>
//
// and the layout would look like:
//    +------------------------+
//    |        #header         |
//    +--------+---------------+
//    |        |               |
//    |#sidebar|    #content   |
//    |        |               |
//    +------------------------+
//    |        #footer         |
//    +--------+---------------+

body.spatialbrowser {
  height: 100%;
  background-color: #ddd;
  
  #container {
    @include box-shadow;
    @include container;
    //border: 1px solid black; 
    margin-top: 10px;
    margin-bottom: 10px;
    padding: 8px;
    padding-bottom: 15px;
    background-color: #fff;
  }
  h1, h2, h3, h4, h5, h6 {
     @include text-shadow;
  }

  #header {
    @include column($blueprint-grid-columns); 
  }
  
  #footer {
    @include column($blueprint-grid-columns); 
  }
  
  #sidebar {
    // One fifth of the grid columns, rounding down. 
    $sidebar-columns: floor($blueprint-grid-columns / 5);
    // true means it's the last column in the row
    @include column($sidebar-columns, true);
    float: right;
    @include box-shadow;
    @include border-radius;
    
    .taglist {
        @include no-bullets;
        padding: 5px;
        margin: 5px;
        a {
            @include unstyled-link;
        } 
    } 
  }
  #content {
    // four fifth of the grid columns, rounding up.
    $content-columns: ceil(4 * $blueprint-grid-columns / 5);
    @include column($content-columns);
    float: left; 
    background-color: grey;
    height: 400px;
    #map {
        height: 100%;
        border: 4px solid #CCCCCC;
    }

  }
     
}
